{
  "hash": "9ac33a82a14bcb89e6784cd5d7552a10",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Julius von Sulecki\"\n---\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_ca5a342ce59f4c16c5ac8fe56806a231'}\n\n```{.r .cell-code}\nlibrary(\"scales\")\n\nlibrary(\"tidyverse\") # loads ggplot2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> -- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\n#> v dplyr     1.1.2     v readr     2.1.4\n#> v forcats   1.0.0     v stringr   1.5.0\n#> v ggplot2   3.4.2     v tibble    3.2.1\n#> v lubridate 1.9.2     v tidyr     1.3.0\n#> v purrr     1.0.1     \n#> -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n#> x readr::col_factor() masks scales::col_factor()\n#> x purrr::discard()    masks scales::discard()\n#> x dplyr::filter()     masks stats::filter()\n#> x dplyr::lag()        masks stats::lag()\n#> i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"lubridate\")\n\nbike_orderlines_tbl <- read_rds(\"../../bikes/02_wrangled_data/bike_orderlines.rds\")\n\n# 1.0 Anatomy of a ggplot ----\n\n# 1.1 How ggplot works ----\n\n# Step 1: Format data ----\n\nsales_by_year_tbl <- bike_orderlines_tbl %>%\n  \n  # Selecting columns to focus on and adding a year column\n  select(order_date, total_price) %>%\n  mutate(year = year(order_date)) %>%\n  \n  # Grouping by year, and summarizing sales\n  group_by(year) %>%\n  summarize(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # € Format Text\n  mutate(sales_text = scales::dollar(sales, \n                                     big.mark     = \".\", \n                                     decimal.mark = \",\", \n                                     prefix       = \"\", \n                                     suffix       = \" €\"))\n\nsales_by_year_tbl\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sales\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sales_text\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"2015\",\"2\":\"9930282\",\"3\":\"9.930.282 \\\\200\"},{\"1\":\"2016\",\"2\":\"10730507\",\"3\":\"10.730.507 \\\\200\"},{\"1\":\"2017\",\"2\":\"14510291\",\"3\":\"14.510.291 \\\\200\"},{\"1\":\"2018\",\"2\":\"12241853\",\"3\":\"12.241.853 \\\\200\"},{\"1\":\"2019\",\"2\":\"15017875\",\"3\":\"15.017.875 \\\\200\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Step 2: Plot ----\nsales_by_year_tbl %>%\n  \n  # Canvas\n  ggplot(aes(x = year, y = sales, color = sales))\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Without piping \nggplot(data = sales_by_year_tbl, \n       aes(x     = year, \n           y     = sales, \n           color = sales))\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_tbl %>%\n  \n  # Canvas\n  ggplot(aes(x = year, y = sales, color = sales)) +\n  \n  # Geometries \n  geom_line(size = 1) +\n  geom_point(size = 5) +\n  geom_smooth(method = \"lm\", se = FALSE) -> base_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> i Please use `linewidth` instead.\n```\n:::\n\n```{.r .cell-code}\nbase_plot +\n  \n  # not what you want because 2 is not a variable\n  geom_point(aes(size = 2),\n             \n             # this is fine -- turns all points red\n             color = \"red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Data Manipulation\norder_value_tbl <- bike_orderlines_tbl %>%\n  \n  select(order_id, order_line, total_price, quantity) %>%\n  \n  group_by(order_id) %>%\n  summarize(\n    total_quantity = sum(quantity),\n    total_price    = sum(total_price)\n  ) %>%\n  ungroup()\n\n# Scatter Plot\norder_value_tbl %>%\n  \n  ggplot(aes(x = total_quantity, y = total_price)) +\n  \n  geom_point(alpha = 0.5, size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Data Manipulation\nrevenue_by_month_tbl <- bike_orderlines_tbl %>%\n  \n  select(order_date, total_price) %>%\n  \n  mutate(year_month = floor_date(order_date, \"months\") %>% ymd()) %>%\n  \n  group_by(year_month) %>%\n  summarize(revenue = sum(total_price)) %>%\n  ungroup()\n\n# Line Plot\nrevenue_by_month_tbl %>%\n  \n  ggplot(aes(year_month, revenue)) +\n  \n  geom_line(size = 0.5, linetype = 1) +\n  geom_smooth(method = \"loess\", span = 0.2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n\n```{.r .cell-code}\n# Data Manipulation\nrevenue_by_category_2_tbl <- bike_orderlines_tbl %>%\n  \n  select(category_2, total_price) %>%\n  \n  group_by(category_2) %>%\n  summarize(revenue = sum(total_price)) %>%\n  ungroup()\n\n# Bar Plot\nrevenue_by_category_2_tbl %>%\n  \n  mutate(category_2 = category_2 %>% as_factor() %>% fct_reorder(revenue)) %>%\n  \n  ggplot(aes(category_2, revenue)) +\n  \n  geom_col(fill = \"#2c3e50\") + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-6.png){width=672}\n:::\n\n```{.r .cell-code}\n# Histogram\n\nbike_orderlines_tbl %>%\n  \n  distinct(model, price) %>%\n  \n  ggplot(aes(price)) +\n  \n  geom_histogram(bins = 25, fill = \"blue\", color = \"white\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-7.png){width=672}\n:::\n\n```{.r .cell-code}\n# Histogram\nbike_orderlines_tbl %>%\n  \n  distinct(price, model, frame_material) %>%\n  \n  ggplot(aes(price, fill = frame_material)) +\n  \n  geom_histogram() +\n  \n  facet_wrap(~ frame_material, ncol = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-8.png){width=672}\n:::\n\n```{.r .cell-code}\n# Density\nbike_orderlines_tbl %>%\n  \n  distinct(price, model, frame_material) %>%\n  \n  ggplot(aes(price, fill = frame_material)) +\n  \n  geom_density(alpha = 0.5) +\n  # facet_wrap(~ frame_material, ncol = 1) +\n  \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-9.png){width=672}\n:::\n\n```{.r .cell-code}\n# Data Manipulation\nunit_price_by_cat_2_tbl <- bike_orderlines_tbl %>%\n  \n  select(category_2, model, price) %>%\n  distinct() %>%\n  \n  mutate(category_2 = as_factor(category_2) %>% fct_reorder(price))\n\n# Box Plot\nunit_price_by_cat_2_tbl %>%\n  \n  ggplot(aes(category_2, price)) +\n  \n  geom_boxplot() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-10.png){width=672}\n:::\n\n```{.r .cell-code}\n# Violin Plot & Jitter Plot\n\nunit_price_by_cat_2_tbl %>%\n  \n  ggplot(aes(category_2, price)) +\n  \n  geom_jitter(width = 0.15, color = \"#2c3e50\") +\n  geom_violin(alpha = 0.5) +\n  \n  coord_flip()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Groups with fewer than two data points have been dropped.\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-11.png){width=672}\n:::\n\n```{.r .cell-code}\n# Data Manipulation\n\nrevenue_by_year_tbl <- bike_orderlines_tbl %>%\n  \n  select(order_date, total_price) %>%\n  \n  mutate(year = year(order_date)) %>%\n  \n  group_by(year) %>%\n  summarize(revenue = sum(total_price)) %>%\n  ungroup()\n\n# Adding text to bar chart\n# Filtering labels to highlight a point\n\nrevenue_by_year_tbl %>%\n  \n  ggplot(aes(year, revenue)) +\n  \n  geom_col(fill = \"#2c3e50\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  \n  geom_text(aes(label =  scales::dollar(revenue, \n                                        scale  = 1e-6, \n                                        prefix = \"\",\n                                        suffix = \"M\")), \n            vjust = 1.5, color = \"white\") +\n  \n  geom_label(label =  \"Major Demand This Year\",\n             vjust = -0.5, \n             size  = 5,\n             fill  = \"#1f78b4\",\n             color = \"white\",\n             fontface = \"italic\",\n             data = revenue_by_year_tbl %>%\n               filter(year %in% c(2019))) + \n  \n  expand_limits(y = 2e7)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-12.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_tbl %>%\n  \n  # Canvas\n  ggplot(aes(x = year, y = sales, color = sales)) +\n  \n  # Geometries \n  geom_line(size = 1) +\n  geom_point(size = 5) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  \n  # same as above, with explicit scales\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_colour_continuous()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-13.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_tbl %>%\n  \n  # Canvas\n  ggplot(aes(x = year, y = sales, color = sales)) +\n  \n  # Geometries \n  geom_line(size = 1) +\n  geom_point(size = 5) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#d62dc6\") +\n  \n  # Formatting\n  expand_limits(y = 0) +\n  # You can also type \"red\", \"black\" etc. for the colors\n  scale_color_continuous(low    = \"#95E1EA\", high = \"#2097A3\", \n                         labels = scales::dollar_format(scale  = 1/1e6, \n                                                        prefix = \"\", \n                                                        suffix = \"M €\")) +\n  scale_y_continuous(labels = scales::dollar_format(scale  = 1/1e6, \n                                                    prefix = \"\", \n                                                    suffix = \"M €\")) +\n  labs(\n    title = \"Revenue\",\n    subtitle = \"Sales are trending up and to the right!\",\n    x = \"\",\n    y = \"Sales (Millions)\",\n    color = \"Rev (M €)\",\n    caption = \"What's happening?\\nSales numbers showing year-over-year growth.\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-14.png){width=672}\n:::\n\n```{.r .cell-code}\nlibrary(ggthemes)\n## DATA PREPARATION\nsales_by_month_2015 <- bike_orderlines_tbl %>%\n  \n  # Selecting columns to focus on and adding a month column\n  select(order_date, total_price) %>%\n  mutate(year  = year(order_date)) %>% \n  mutate(month = month(order_date)) %>%\n  \n  filter(year == \"2015\") %>%\n  \n  # Grouping by month, and summarizing sales\n  group_by(month) %>%\n  summarize(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # $ Format Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\",\n                                     decimal.mark    = \",\",\n                                     prefix          = \"\",  \n                                     suffix          = \" €\"))\n\n## PLOTTING\n# Canvas\nsales_by_month_2015 %>% \n  ggplot(aes(x = month, y = sales, color = sales)) +\n  \n  # Geometries \n  geom_line(size = 1) +\n  geom_point(size = 5) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  \n  # Formatting\n  expand_limits(y = 0) +\n  scale_color_continuous(low = \"red\", high = \"black\",\n                         labels = scales::dollar_format(scale = 1/1e6, \n                                                        prefix = \"\", \n                                                        suffix = \"M €\")) +\n  scale_x_continuous(breaks = sales_by_month_2015$month, \n                     labels = month(sales_by_month_2015$month, label = T)) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1/1e6, \n                                                    prefix = \"\", \n                                                    suffix = \"M\")) +\n  labs(\n    title = \"Monthly sales (2015)\",\n    subtitle = \"April is the strongest month!\",\n    x = \"\",\n    y = \"Sales (Millions)\",\n    color = \"Rev (M €)\",\n    caption = \"What's happening?\\nSales numbers are dropping towards the end of the year.\"\n  )  +  \n  theme_economist() +\n  theme(legend.position  = \"right\", \n        legend.direction = \"vertical\",\n        axis.text.x = element_text(angle = 45))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-15.png){width=672}\n:::\n\n```{.r .cell-code}\n# Data Manipulation\n\nsales_by_year_category_1_tbl <- bike_orderlines_tbl %>%\n  select(order_date, category_1, total_price) %>%\n  \n  mutate(order_date = ymd(order_date)) %>%\n  mutate(year = year(order_date)) %>%\n  \n  group_by(category_1, year) %>%\n  summarize(revenue = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Convert character vectors to factors\n  # Arrange by year and revenue\n  mutate(category_1 = fct_reorder2(category_1, year, revenue))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'category_1'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nsales_by_year_category_1_tbl\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"category_1\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"revenue\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"E-Bikes\",\"2\":\"2015\",\"3\":\"1599048\"},{\"1\":\"E-Bikes\",\"2\":\"2016\",\"3\":\"1916469\"},{\"1\":\"E-Bikes\",\"2\":\"2017\",\"3\":\"2617352\"},{\"1\":\"E-Bikes\",\"2\":\"2018\",\"3\":\"2151550\"},{\"1\":\"E-Bikes\",\"2\":\"2019\",\"3\":\"2667921\"},{\"1\":\"Gravel\",\"2\":\"2015\",\"3\":\"663025\"},{\"1\":\"Gravel\",\"2\":\"2016\",\"3\":\"768794\"},{\"1\":\"Gravel\",\"2\":\"2017\",\"3\":\"1006839\"},{\"1\":\"Gravel\",\"2\":\"2018\",\"3\":\"792234\"},{\"1\":\"Gravel\",\"2\":\"2019\",\"3\":\"1169038\"},{\"1\":\"Hybrid / City\",\"2\":\"2015\",\"3\":\"502512\"},{\"1\":\"Hybrid / City\",\"2\":\"2016\",\"3\":\"512346\"},{\"1\":\"Hybrid / City\",\"2\":\"2017\",\"3\":\"784491\"},{\"1\":\"Hybrid / City\",\"2\":\"2018\",\"3\":\"576805\"},{\"1\":\"Hybrid / City\",\"2\":\"2019\",\"3\":\"617064\"},{\"1\":\"Mountain\",\"2\":\"2015\",\"3\":\"3254289\"},{\"1\":\"Mountain\",\"2\":\"2016\",\"3\":\"3288733\"},{\"1\":\"Mountain\",\"2\":\"2017\",\"3\":\"4482867\"},{\"1\":\"Mountain\",\"2\":\"2018\",\"3\":\"4090277\"},{\"1\":\"Mountain\",\"2\":\"2019\",\"3\":\"4674327\"},{\"1\":\"Road\",\"2\":\"2015\",\"3\":\"3911408\"},{\"1\":\"Road\",\"2\":\"2016\",\"3\":\"4244165\"},{\"1\":\"Road\",\"2\":\"2017\",\"3\":\"5618742\"},{\"1\":\"Road\",\"2\":\"2018\",\"3\":\"4630987\"},{\"1\":\"Road\",\"2\":\"2019\",\"3\":\"5889525\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Uncover the factor levels (just for demonstration)\n# sorted by years and the highest revenues\nsales_by_year_category_1_tbl %>%\n  mutate(category_1_num = as.numeric(category_1)) %>%\n  arrange(category_1_num)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"category_1\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"revenue\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"category_1_num\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Road\",\"2\":\"2015\",\"3\":\"3911408\",\"4\":\"1\"},{\"1\":\"Road\",\"2\":\"2016\",\"3\":\"4244165\",\"4\":\"1\"},{\"1\":\"Road\",\"2\":\"2017\",\"3\":\"5618742\",\"4\":\"1\"},{\"1\":\"Road\",\"2\":\"2018\",\"3\":\"4630987\",\"4\":\"1\"},{\"1\":\"Road\",\"2\":\"2019\",\"3\":\"5889525\",\"4\":\"1\"},{\"1\":\"Mountain\",\"2\":\"2015\",\"3\":\"3254289\",\"4\":\"2\"},{\"1\":\"Mountain\",\"2\":\"2016\",\"3\":\"3288733\",\"4\":\"2\"},{\"1\":\"Mountain\",\"2\":\"2017\",\"3\":\"4482867\",\"4\":\"2\"},{\"1\":\"Mountain\",\"2\":\"2018\",\"3\":\"4090277\",\"4\":\"2\"},{\"1\":\"Mountain\",\"2\":\"2019\",\"3\":\"4674327\",\"4\":\"2\"},{\"1\":\"E-Bikes\",\"2\":\"2015\",\"3\":\"1599048\",\"4\":\"3\"},{\"1\":\"E-Bikes\",\"2\":\"2016\",\"3\":\"1916469\",\"4\":\"3\"},{\"1\":\"E-Bikes\",\"2\":\"2017\",\"3\":\"2617352\",\"4\":\"3\"},{\"1\":\"E-Bikes\",\"2\":\"2018\",\"3\":\"2151550\",\"4\":\"3\"},{\"1\":\"E-Bikes\",\"2\":\"2019\",\"3\":\"2667921\",\"4\":\"3\"},{\"1\":\"Gravel\",\"2\":\"2015\",\"3\":\"663025\",\"4\":\"4\"},{\"1\":\"Gravel\",\"2\":\"2016\",\"3\":\"768794\",\"4\":\"4\"},{\"1\":\"Gravel\",\"2\":\"2017\",\"3\":\"1006839\",\"4\":\"4\"},{\"1\":\"Gravel\",\"2\":\"2018\",\"3\":\"792234\",\"4\":\"4\"},{\"1\":\"Gravel\",\"2\":\"2019\",\"3\":\"1169038\",\"4\":\"4\"},{\"1\":\"Hybrid / City\",\"2\":\"2015\",\"3\":\"502512\",\"4\":\"5\"},{\"1\":\"Hybrid / City\",\"2\":\"2016\",\"3\":\"512346\",\"4\":\"5\"},{\"1\":\"Hybrid / City\",\"2\":\"2017\",\"3\":\"784491\",\"4\":\"5\"},{\"1\":\"Hybrid / City\",\"2\":\"2018\",\"3\":\"576805\",\"4\":\"5\"},{\"1\":\"Hybrid / City\",\"2\":\"2019\",\"3\":\"617064\",\"4\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Named Colors. This returns a long list of colors that can be used by name\ncolors()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   [1] \"white\"                \"aliceblue\"            \"antiquewhite\"        \n#>   [4] \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n#>   [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"         \n#>  [10] \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n#>  [13] \"azure\"                \"azure1\"               \"azure2\"              \n#>  [16] \"azure3\"               \"azure4\"               \"beige\"               \n#>  [19] \"bisque\"               \"bisque1\"              \"bisque2\"             \n#>  [22] \"bisque3\"              \"bisque4\"              \"black\"               \n#>  [25] \"blanchedalmond\"       \"blue\"                 \"blue1\"               \n#>  [28] \"blue2\"                \"blue3\"                \"blue4\"               \n#>  [31] \"blueviolet\"           \"brown\"                \"brown1\"              \n#>  [34] \"brown2\"               \"brown3\"               \"brown4\"              \n#>  [37] \"burlywood\"            \"burlywood1\"           \"burlywood2\"          \n#>  [40] \"burlywood3\"           \"burlywood4\"           \"cadetblue\"           \n#>  [43] \"cadetblue1\"           \"cadetblue2\"           \"cadetblue3\"          \n#>  [46] \"cadetblue4\"           \"chartreuse\"           \"chartreuse1\"         \n#>  [49] \"chartreuse2\"          \"chartreuse3\"          \"chartreuse4\"         \n#>  [52] \"chocolate\"            \"chocolate1\"           \"chocolate2\"          \n#>  [55] \"chocolate3\"           \"chocolate4\"           \"coral\"               \n#>  [58] \"coral1\"               \"coral2\"               \"coral3\"              \n#>  [61] \"coral4\"               \"cornflowerblue\"       \"cornsilk\"            \n#>  [64] \"cornsilk1\"            \"cornsilk2\"            \"cornsilk3\"           \n#>  [67] \"cornsilk4\"            \"cyan\"                 \"cyan1\"               \n#>  [70] \"cyan2\"                \"cyan3\"                \"cyan4\"               \n#>  [73] \"darkblue\"             \"darkcyan\"             \"darkgoldenrod\"       \n#>  [76] \"darkgoldenrod1\"       \"darkgoldenrod2\"       \"darkgoldenrod3\"      \n#>  [79] \"darkgoldenrod4\"       \"darkgray\"             \"darkgreen\"           \n#>  [82] \"darkgrey\"             \"darkkhaki\"            \"darkmagenta\"         \n#>  [85] \"darkolivegreen\"       \"darkolivegreen1\"      \"darkolivegreen2\"     \n#>  [88] \"darkolivegreen3\"      \"darkolivegreen4\"      \"darkorange\"          \n#>  [91] \"darkorange1\"          \"darkorange2\"          \"darkorange3\"         \n#>  [94] \"darkorange4\"          \"darkorchid\"           \"darkorchid1\"         \n#>  [97] \"darkorchid2\"          \"darkorchid3\"          \"darkorchid4\"         \n#> [100] \"darkred\"              \"darksalmon\"           \"darkseagreen\"        \n#> [103] \"darkseagreen1\"        \"darkseagreen2\"        \"darkseagreen3\"       \n#> [106] \"darkseagreen4\"        \"darkslateblue\"        \"darkslategray\"       \n#> [109] \"darkslategray1\"       \"darkslategray2\"       \"darkslategray3\"      \n#> [112] \"darkslategray4\"       \"darkslategrey\"        \"darkturquoise\"       \n#> [115] \"darkviolet\"           \"deeppink\"             \"deeppink1\"           \n#> [118] \"deeppink2\"            \"deeppink3\"            \"deeppink4\"           \n#> [121] \"deepskyblue\"          \"deepskyblue1\"         \"deepskyblue2\"        \n#> [124] \"deepskyblue3\"         \"deepskyblue4\"         \"dimgray\"             \n#> [127] \"dimgrey\"              \"dodgerblue\"           \"dodgerblue1\"         \n#> [130] \"dodgerblue2\"          \"dodgerblue3\"          \"dodgerblue4\"         \n#> [133] \"firebrick\"            \"firebrick1\"           \"firebrick2\"          \n#> [136] \"firebrick3\"           \"firebrick4\"           \"floralwhite\"         \n#> [139] \"forestgreen\"          \"gainsboro\"            \"ghostwhite\"          \n#> [142] \"gold\"                 \"gold1\"                \"gold2\"               \n#> [145] \"gold3\"                \"gold4\"                \"goldenrod\"           \n#> [148] \"goldenrod1\"           \"goldenrod2\"           \"goldenrod3\"          \n#> [151] \"goldenrod4\"           \"gray\"                 \"gray0\"               \n#> [154] \"gray1\"                \"gray2\"                \"gray3\"               \n#> [157] \"gray4\"                \"gray5\"                \"gray6\"               \n#> [160] \"gray7\"                \"gray8\"                \"gray9\"               \n#> [163] \"gray10\"               \"gray11\"               \"gray12\"              \n#> [166] \"gray13\"               \"gray14\"               \"gray15\"              \n#> [169] \"gray16\"               \"gray17\"               \"gray18\"              \n#> [172] \"gray19\"               \"gray20\"               \"gray21\"              \n#> [175] \"gray22\"               \"gray23\"               \"gray24\"              \n#> [178] \"gray25\"               \"gray26\"               \"gray27\"              \n#> [181] \"gray28\"               \"gray29\"               \"gray30\"              \n#> [184] \"gray31\"               \"gray32\"               \"gray33\"              \n#> [187] \"gray34\"               \"gray35\"               \"gray36\"              \n#> [190] \"gray37\"               \"gray38\"               \"gray39\"              \n#> [193] \"gray40\"               \"gray41\"               \"gray42\"              \n#> [196] \"gray43\"               \"gray44\"               \"gray45\"              \n#> [199] \"gray46\"               \"gray47\"               \"gray48\"              \n#> [202] \"gray49\"               \"gray50\"               \"gray51\"              \n#> [205] \"gray52\"               \"gray53\"               \"gray54\"              \n#> [208] \"gray55\"               \"gray56\"               \"gray57\"              \n#> [211] \"gray58\"               \"gray59\"               \"gray60\"              \n#> [214] \"gray61\"               \"gray62\"               \"gray63\"              \n#> [217] \"gray64\"               \"gray65\"               \"gray66\"              \n#> [220] \"gray67\"               \"gray68\"               \"gray69\"              \n#> [223] \"gray70\"               \"gray71\"               \"gray72\"              \n#> [226] \"gray73\"               \"gray74\"               \"gray75\"              \n#> [229] \"gray76\"               \"gray77\"               \"gray78\"              \n#> [232] \"gray79\"               \"gray80\"               \"gray81\"              \n#> [235] \"gray82\"               \"gray83\"               \"gray84\"              \n#> [238] \"gray85\"               \"gray86\"               \"gray87\"              \n#> [241] \"gray88\"               \"gray89\"               \"gray90\"              \n#> [244] \"gray91\"               \"gray92\"               \"gray93\"              \n#> [247] \"gray94\"               \"gray95\"               \"gray96\"              \n#> [250] \"gray97\"               \"gray98\"               \"gray99\"              \n#> [253] \"gray100\"              \"green\"                \"green1\"              \n#> [256] \"green2\"               \"green3\"               \"green4\"              \n#> [259] \"greenyellow\"          \"grey\"                 \"grey0\"               \n#> [262] \"grey1\"                \"grey2\"                \"grey3\"               \n#> [265] \"grey4\"                \"grey5\"                \"grey6\"               \n#> [268] \"grey7\"                \"grey8\"                \"grey9\"               \n#> [271] \"grey10\"               \"grey11\"               \"grey12\"              \n#> [274] \"grey13\"               \"grey14\"               \"grey15\"              \n#> [277] \"grey16\"               \"grey17\"               \"grey18\"              \n#> [280] \"grey19\"               \"grey20\"               \"grey21\"              \n#> [283] \"grey22\"               \"grey23\"               \"grey24\"              \n#> [286] \"grey25\"               \"grey26\"               \"grey27\"              \n#> [289] \"grey28\"               \"grey29\"               \"grey30\"              \n#> [292] \"grey31\"               \"grey32\"               \"grey33\"              \n#> [295] \"grey34\"               \"grey35\"               \"grey36\"              \n#> [298] \"grey37\"               \"grey38\"               \"grey39\"              \n#> [301] \"grey40\"               \"grey41\"               \"grey42\"              \n#> [304] \"grey43\"               \"grey44\"               \"grey45\"              \n#> [307] \"grey46\"               \"grey47\"               \"grey48\"              \n#> [310] \"grey49\"               \"grey50\"               \"grey51\"              \n#> [313] \"grey52\"               \"grey53\"               \"grey54\"              \n#> [316] \"grey55\"               \"grey56\"               \"grey57\"              \n#> [319] \"grey58\"               \"grey59\"               \"grey60\"              \n#> [322] \"grey61\"               \"grey62\"               \"grey63\"              \n#> [325] \"grey64\"               \"grey65\"               \"grey66\"              \n#> [328] \"grey67\"               \"grey68\"               \"grey69\"              \n#> [331] \"grey70\"               \"grey71\"               \"grey72\"              \n#> [334] \"grey73\"               \"grey74\"               \"grey75\"              \n#> [337] \"grey76\"               \"grey77\"               \"grey78\"              \n#> [340] \"grey79\"               \"grey80\"               \"grey81\"              \n#> [343] \"grey82\"               \"grey83\"               \"grey84\"              \n#> [346] \"grey85\"               \"grey86\"               \"grey87\"              \n#> [349] \"grey88\"               \"grey89\"               \"grey90\"              \n#> [352] \"grey91\"               \"grey92\"               \"grey93\"              \n#> [355] \"grey94\"               \"grey95\"               \"grey96\"              \n#> [358] \"grey97\"               \"grey98\"               \"grey99\"              \n#> [361] \"grey100\"              \"honeydew\"             \"honeydew1\"           \n#> [364] \"honeydew2\"            \"honeydew3\"            \"honeydew4\"           \n#> [367] \"hotpink\"              \"hotpink1\"             \"hotpink2\"            \n#> [370] \"hotpink3\"             \"hotpink4\"             \"indianred\"           \n#> [373] \"indianred1\"           \"indianred2\"           \"indianred3\"          \n#> [376] \"indianred4\"           \"ivory\"                \"ivory1\"              \n#> [379] \"ivory2\"               \"ivory3\"               \"ivory4\"              \n#> [382] \"khaki\"                \"khaki1\"               \"khaki2\"              \n#> [385] \"khaki3\"               \"khaki4\"               \"lavender\"            \n#> [388] \"lavenderblush\"        \"lavenderblush1\"       \"lavenderblush2\"      \n#> [391] \"lavenderblush3\"       \"lavenderblush4\"       \"lawngreen\"           \n#> [394] \"lemonchiffon\"         \"lemonchiffon1\"        \"lemonchiffon2\"       \n#> [397] \"lemonchiffon3\"        \"lemonchiffon4\"        \"lightblue\"           \n#> [400] \"lightblue1\"           \"lightblue2\"           \"lightblue3\"          \n#> [403] \"lightblue4\"           \"lightcoral\"           \"lightcyan\"           \n#> [406] \"lightcyan1\"           \"lightcyan2\"           \"lightcyan3\"          \n#> [409] \"lightcyan4\"           \"lightgoldenrod\"       \"lightgoldenrod1\"     \n#> [412] \"lightgoldenrod2\"      \"lightgoldenrod3\"      \"lightgoldenrod4\"     \n#> [415] \"lightgoldenrodyellow\" \"lightgray\"            \"lightgreen\"          \n#> [418] \"lightgrey\"            \"lightpink\"            \"lightpink1\"          \n#> [421] \"lightpink2\"           \"lightpink3\"           \"lightpink4\"          \n#> [424] \"lightsalmon\"          \"lightsalmon1\"         \"lightsalmon2\"        \n#> [427] \"lightsalmon3\"         \"lightsalmon4\"         \"lightseagreen\"       \n#> [430] \"lightskyblue\"         \"lightskyblue1\"        \"lightskyblue2\"       \n#> [433] \"lightskyblue3\"        \"lightskyblue4\"        \"lightslateblue\"      \n#> [436] \"lightslategray\"       \"lightslategrey\"       \"lightsteelblue\"      \n#> [439] \"lightsteelblue1\"      \"lightsteelblue2\"      \"lightsteelblue3\"     \n#> [442] \"lightsteelblue4\"      \"lightyellow\"          \"lightyellow1\"        \n#> [445] \"lightyellow2\"         \"lightyellow3\"         \"lightyellow4\"        \n#> [448] \"limegreen\"            \"linen\"                \"magenta\"             \n#> [451] \"magenta1\"             \"magenta2\"             \"magenta3\"            \n#> [454] \"magenta4\"             \"maroon\"               \"maroon1\"             \n#> [457] \"maroon2\"              \"maroon3\"              \"maroon4\"             \n#> [460] \"mediumaquamarine\"     \"mediumblue\"           \"mediumorchid\"        \n#> [463] \"mediumorchid1\"        \"mediumorchid2\"        \"mediumorchid3\"       \n#> [466] \"mediumorchid4\"        \"mediumpurple\"         \"mediumpurple1\"       \n#> [469] \"mediumpurple2\"        \"mediumpurple3\"        \"mediumpurple4\"       \n#> [472] \"mediumseagreen\"       \"mediumslateblue\"      \"mediumspringgreen\"   \n#> [475] \"mediumturquoise\"      \"mediumvioletred\"      \"midnightblue\"        \n#> [478] \"mintcream\"            \"mistyrose\"            \"mistyrose1\"          \n#> [481] \"mistyrose2\"           \"mistyrose3\"           \"mistyrose4\"          \n#> [484] \"moccasin\"             \"navajowhite\"          \"navajowhite1\"        \n#> [487] \"navajowhite2\"         \"navajowhite3\"         \"navajowhite4\"        \n#> [490] \"navy\"                 \"navyblue\"             \"oldlace\"             \n#> [493] \"olivedrab\"            \"olivedrab1\"           \"olivedrab2\"          \n#> [496] \"olivedrab3\"           \"olivedrab4\"           \"orange\"              \n#> [499] \"orange1\"              \"orange2\"              \"orange3\"             \n#> [502] \"orange4\"              \"orangered\"            \"orangered1\"          \n#> [505] \"orangered2\"           \"orangered3\"           \"orangered4\"          \n#> [508] \"orchid\"               \"orchid1\"              \"orchid2\"             \n#> [511] \"orchid3\"              \"orchid4\"              \"palegoldenrod\"       \n#> [514] \"palegreen\"            \"palegreen1\"           \"palegreen2\"          \n#> [517] \"palegreen3\"           \"palegreen4\"           \"paleturquoise\"       \n#> [520] \"paleturquoise1\"       \"paleturquoise2\"       \"paleturquoise3\"      \n#> [523] \"paleturquoise4\"       \"palevioletred\"        \"palevioletred1\"      \n#> [526] \"palevioletred2\"       \"palevioletred3\"       \"palevioletred4\"      \n#> [529] \"papayawhip\"           \"peachpuff\"            \"peachpuff1\"          \n#> [532] \"peachpuff2\"           \"peachpuff3\"           \"peachpuff4\"          \n#> [535] \"peru\"                 \"pink\"                 \"pink1\"               \n#> [538] \"pink2\"                \"pink3\"                \"pink4\"               \n#> [541] \"plum\"                 \"plum1\"                \"plum2\"               \n#> [544] \"plum3\"                \"plum4\"                \"powderblue\"          \n#> [547] \"purple\"               \"purple1\"              \"purple2\"             \n#> [550] \"purple3\"              \"purple4\"              \"red\"                 \n#> [553] \"red1\"                 \"red2\"                 \"red3\"                \n#> [556] \"red4\"                 \"rosybrown\"            \"rosybrown1\"          \n#> [559] \"rosybrown2\"           \"rosybrown3\"           \"rosybrown4\"          \n#> [562] \"royalblue\"            \"royalblue1\"           \"royalblue2\"          \n#> [565] \"royalblue3\"           \"royalblue4\"           \"saddlebrown\"         \n#> [568] \"salmon\"               \"salmon1\"              \"salmon2\"             \n#> [571] \"salmon3\"              \"salmon4\"              \"sandybrown\"          \n#> [574] \"seagreen\"             \"seagreen1\"            \"seagreen2\"           \n#> [577] \"seagreen3\"            \"seagreen4\"            \"seashell\"            \n#> [580] \"seashell1\"            \"seashell2\"            \"seashell3\"           \n#> [583] \"seashell4\"            \"sienna\"               \"sienna1\"             \n#> [586] \"sienna2\"              \"sienna3\"              \"sienna4\"             \n#> [589] \"skyblue\"              \"skyblue1\"             \"skyblue2\"            \n#> [592] \"skyblue3\"             \"skyblue4\"             \"slateblue\"           \n#> [595] \"slateblue1\"           \"slateblue2\"           \"slateblue3\"          \n#> [598] \"slateblue4\"           \"slategray\"            \"slategray1\"          \n#> [601] \"slategray2\"           \"slategray3\"           \"slategray4\"          \n#> [604] \"slategrey\"            \"snow\"                 \"snow1\"               \n#> [607] \"snow2\"                \"snow3\"                \"snow4\"               \n#> [610] \"springgreen\"          \"springgreen1\"         \"springgreen2\"        \n#> [613] \"springgreen3\"         \"springgreen4\"         \"steelblue\"           \n#> [616] \"steelblue1\"           \"steelblue2\"           \"steelblue3\"          \n#> [619] \"steelblue4\"           \"tan\"                  \"tan1\"                \n#> [622] \"tan2\"                 \"tan3\"                 \"tan4\"                \n#> [625] \"thistle\"              \"thistle1\"             \"thistle2\"            \n#> [628] \"thistle3\"             \"thistle4\"             \"tomato\"              \n#> [631] \"tomato1\"              \"tomato2\"              \"tomato3\"             \n#> [634] \"tomato4\"              \"turquoise\"            \"turquoise1\"          \n#> [637] \"turquoise2\"           \"turquoise3\"           \"turquoise4\"          \n#> [640] \"violet\"               \"violetred\"            \"violetred1\"          \n#> [643] \"violetred2\"           \"violetred3\"           \"violetred4\"          \n#> [646] \"wheat\"                \"wheat1\"               \"wheat2\"              \n#> [649] \"wheat3\"               \"wheat4\"               \"whitesmoke\"          \n#> [652] \"yellow\"               \"yellow1\"              \"yellow2\"             \n#> [655] \"yellow3\"              \"yellow4\"              \"yellowgreen\"\n```\n:::\n\n```{.r .cell-code}\n# Example\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue)) +\n  \n  geom_col(fill = \"slateblue\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-16.png){width=672}\n:::\n\n```{.r .cell-code}\n# To RGB\ncol2rgb(\"slateblue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>       [,1]\n#> red    106\n#> green   90\n#> blue   205\n```\n:::\n\n```{.r .cell-code}\ncol2rgb(\"#2C3E50\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>       [,1]\n#> red     44\n#> green   62\n#> blue    80\n```\n:::\n\n```{.r .cell-code}\n# To HEX (this function should be provided to a geom)\nrgb(44, 62, 80, maxColorValue = 255)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"#2C3E50\"\n```\n:::\n\n```{.r .cell-code}\n### Brewer. Comes with basic R.\n#Primarly for discrete data.\n\n# We can use those palletes by just calling their names (e.g. \"Blues\")\n# Display the colors\nRColorBrewer::display.brewer.all() \n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-17.png){width=672}\n:::\n\n```{.r .cell-code}\n# Get information\nRColorBrewer::brewer.pal.info\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"maxcolors\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"category\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"colorblind\"],\"name\":[3],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"BrBG\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"PiYG\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"PRGn\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"PuOr\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"RdBu\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"FALSE\",\"_rn_\":\"RdGy\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"RdYlBu\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"FALSE\",\"_rn_\":\"RdYlGn\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"FALSE\",\"_rn_\":\"Spectral\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Accent\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"TRUE\",\"_rn_\":\"Dark2\"},{\"1\":\"12\",\"2\":\"qual\",\"3\":\"TRUE\",\"_rn_\":\"Paired\"},{\"1\":\"9\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Pastel1\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Pastel2\"},{\"1\":\"9\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Set1\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"TRUE\",\"_rn_\":\"Set2\"},{\"1\":\"12\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Set3\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Blues\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"BuGn\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"BuPu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"GnBu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Greens\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Greys\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Oranges\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"OrRd\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"PuBu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"PuBuGn\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"PuRd\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Purples\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"RdPu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Reds\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlGn\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlGnBu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlOrBr\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlOrRd\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Get the HEX codes\nRColorBrewer::brewer.pal(n = 8, name = \"Blues\")[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"#F7FBFF\"\n```\n:::\n\n```{.r .cell-code}\n# Example\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue)) +\n  \n  geom_col(fill = RColorBrewer::brewer.pal(n = 8, name = \"Blues\")[8])\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-18.png){width=672}\n:::\n\n```{.r .cell-code}\n### Viridis\nviridisLite::viridis(n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"#440154FF\" \"#481568FF\" \"#482677FF\" \"#453781FF\" \"#3F4788FF\" \"#39558CFF\"\n#>  [7] \"#32648EFF\" \"#2D718EFF\" \"#287D8EFF\" \"#238A8DFF\" \"#1F968BFF\" \"#20A386FF\"\n#> [13] \"#29AF7FFF\" \"#3CBC75FF\" \"#56C667FF\" \"#74D055FF\" \"#94D840FF\" \"#B8DE29FF\"\n#> [19] \"#DCE318FF\" \"#FDE725FF\"\n```\n:::\n\n```{.r .cell-code}\n# The last two characters indicate the transparency (e.g. FF makes it 100% transparent)\n\n# Example\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue)) +\n  \n  geom_col(fill = viridisLite::viridis(n = 20)[10])\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-19.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_category_1_tbl %>%\n  \n  # Put the aes color mapping here, to apply it to geom_line and geom_point\n  ggplot(aes(year, revenue, color = category_1)) +\n  \n  # Or you could do it locally in each geom \n  # (aes mapping only necessary if you map it to a column)\n  geom_line(size = 1) + # geom_line(aes(color = category_1))\n  geom_point(color = \"dodgerblue\", size = 5)\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-20.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue)) +\n  geom_col(aes(fill = category_1)) \n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-21.png){width=672}\n:::\n\n```{.r .cell-code}\n# You could use color = ... to color the outlines\n\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, size = revenue)) +\n  \n  # The local size overrides the global size\n  geom_line(aes(color = category_1), size = 1) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-22.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, color = category_1)) +\n  geom_line(color = \"black\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  \n  # Break out stacked plot\n  facet_wrap(~ category_1, ncol = 3, scales = \"free_y\") +\n  \n  expand_limits(y = 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-23.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, fill = category_1)) +\n  # geom_col(position = \"stack\") # default\n  # geom_col(position = \"dodge\")\n  geom_col(position = position_dodge(width = 0.9), color = \"white\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-24.png){width=672}\n:::\n\n```{.r .cell-code}\n# Stacked Area\n\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, fill = category_1)) +\n  geom_area(color = \"black\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-25.png){width=672}\n:::\n\n```{.r .cell-code}\ng_facet_continuous <- sales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, color = revenue)) +\n  geom_line(size = 1) +\n  geom_point(size = 3) +\n  \n  facet_wrap(~ category_1, scales = \"free_y\") +\n  expand_limits(y = 0) +\n  \n  theme_minimal()\n\ng_facet_continuous\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-26.png){width=672}\n:::\n\n```{.r .cell-code}\ng_facet_discrete <- sales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, color = category_1)) +\n  geom_line(size = 1) +\n  geom_point(size = 3) +\n  \n  facet_wrap(~ category_1, scales = \"free_y\") +\n  expand_limits(y = 0) +\n  \n  theme_minimal()\n\ng_facet_discrete\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-27.png){width=672}\n:::\n\n```{.r .cell-code}\ng_area_discrete <- sales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, fill = category_1)) +\n  geom_area(color = \"black\") +\n  \n  theme_minimal()\n\ng_area_discrete\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-28.png){width=672}\n:::\n\n```{.r .cell-code}\ng_area_discrete <- sales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, fill = category_1)) +\n  geom_area(color = \"black\") +\n  \n  theme_minimal()\n\ng_area_discrete\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-29.png){width=672}\n:::\n\n```{.r .cell-code}\nRColorBrewer::display.brewer.all()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-30.png){width=672}\n:::\n\n```{.r .cell-code}\nRColorBrewer::brewer.pal.info\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"maxcolors\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"category\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"colorblind\"],\"name\":[3],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"BrBG\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"PiYG\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"PRGn\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"PuOr\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"RdBu\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"FALSE\",\"_rn_\":\"RdGy\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"TRUE\",\"_rn_\":\"RdYlBu\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"FALSE\",\"_rn_\":\"RdYlGn\"},{\"1\":\"11\",\"2\":\"div\",\"3\":\"FALSE\",\"_rn_\":\"Spectral\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Accent\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"TRUE\",\"_rn_\":\"Dark2\"},{\"1\":\"12\",\"2\":\"qual\",\"3\":\"TRUE\",\"_rn_\":\"Paired\"},{\"1\":\"9\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Pastel1\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Pastel2\"},{\"1\":\"9\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Set1\"},{\"1\":\"8\",\"2\":\"qual\",\"3\":\"TRUE\",\"_rn_\":\"Set2\"},{\"1\":\"12\",\"2\":\"qual\",\"3\":\"FALSE\",\"_rn_\":\"Set3\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Blues\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"BuGn\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"BuPu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"GnBu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Greens\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Greys\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Oranges\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"OrRd\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"PuBu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"PuBuGn\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"PuRd\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Purples\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"RdPu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"Reds\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlGn\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlGnBu\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlOrBr\"},{\"1\":\"9\",\"2\":\"seq\",\"3\":\"TRUE\",\"_rn_\":\"YlOrRd\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nRColorBrewer::brewer.pal(n = 8, name = \"Blues\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"#F7FBFF\" \"#DEEBF7\" \"#C6DBEF\" \"#9ECAE1\" \"#6BAED6\" \"#4292C6\" \"#2171B5\"\n#> [8] \"#084594\"\n```\n:::\n\n```{.r .cell-code}\ng_facet_discrete +\n  scale_color_brewer(palette = \"Set3\") +\n  theme_dark()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-31.png){width=672}\n:::\n\n```{.r .cell-code}\ng_facet_discrete +\n  scale_color_viridis_d(option = \"D\") +\n  theme_dark()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-32.png){width=672}\n:::\n\n```{.r .cell-code}\ng_area_discrete +\n  scale_fill_brewer(palette = \"Set3\")\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-33.png){width=672}\n:::\n\n```{.r .cell-code}\ng_area_discrete +\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-34.png){width=672}\n:::\n\n```{.r .cell-code}\ng_facet_continuous +\n  scale_x_continuous(breaks = seq(2015, 2019, by = 2)) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, \n                                                    preix = \"\",\n                                                    suffix = \"M\"))\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-35.png){width=672}\n:::\n\n```{.r .cell-code}\ng_facet_continuous +\n  \n  scale_x_continuous(breaks = seq(2011, 2015, by = 2)) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, \n                                                    suffix = \"M\")) +\n  \n  geom_smooth(method = \"lm\", se = FALSE) +\n  \n  scale_color_viridis_c() +\n  theme_dark() +\n  \n  labs(\n    title = \"Bike Sales\",\n    subtitle = \"Sales are trending up\",\n    caption = \"5-year sales trends\\ncomes from our ERP Database\",\n    x = \"Year\",\n    y = \"Revenue (M €)\",\n    color = \"Revenue\" # Legend text\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n#> The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n#> The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n#> The following aesthetics were dropped during statistical transformation: colour\n#> i This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> i Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-36.png){width=672}\n:::\n\n```{.r .cell-code}\ng_facet_continuous +\n  \n  theme_light() +\n  \n  theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    ),\n    strip.background = element_rect(\n      color = \"black\",\n      fill  = \"cornflowerblue\",\n      size  = 1\n    ),\n    strip.text = element_text(\n      face  = \"bold\",\n      color = \"white\"\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> i Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-37.png){width=672}\n:::\n\n```{.r .cell-code}\nsales_by_year_category_1_tbl %>%\n  \n  ggplot(aes(year, revenue, fill = category_1)) +\n  \n  geom_area(color = \"black\") +\n  \n  # Scales\n  scale_fill_brewer(palette = \"Blues\", direction = -1) +\n  scale_y_continuous(labels = scales::dollar_format(prefix = \"\", suffix = \" €\")) +\n  \n  # Labels\n  labs(\n    title = \"Sales Over Year by Category 1\",\n    subtitle = \"Sales Trending Upward\",\n    x = \"\",\n    y = \"Revenue (M €)\",\n    fill = \"2nd Category\",\n    caption = \"Bike sales trends look strong heading into 2020\"\n  ) +\n  \n  # Theme\n  theme_light() +\n  theme(\n    title = element_text(face = \"bold\", color = \"#08306B\")\n    \n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-38.png){width=672}\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstarwars %>% \n  filter(!is.na(species)) %>%\n  count(species, sort = TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Human\",\"2\":\"35\"},{\"1\":\"Droid\",\"2\":\"6\"},{\"1\":\"Gungan\",\"2\":\"3\"},{\"1\":\"Kaminoan\",\"2\":\"2\"},{\"1\":\"Mirialan\",\"2\":\"2\"},{\"1\":\"Twi'lek\",\"2\":\"2\"},{\"1\":\"Wookiee\",\"2\":\"2\"},{\"1\":\"Zabrak\",\"2\":\"2\"},{\"1\":\"Aleena\",\"2\":\"1\"},{\"1\":\"Besalisk\",\"2\":\"1\"},{\"1\":\"Cerean\",\"2\":\"1\"},{\"1\":\"Chagrian\",\"2\":\"1\"},{\"1\":\"Clawdite\",\"2\":\"1\"},{\"1\":\"Dug\",\"2\":\"1\"},{\"1\":\"Ewok\",\"2\":\"1\"},{\"1\":\"Geonosian\",\"2\":\"1\"},{\"1\":\"Hutt\",\"2\":\"1\"},{\"1\":\"Iktotchi\",\"2\":\"1\"},{\"1\":\"Kaleesh\",\"2\":\"1\"},{\"1\":\"Kel Dor\",\"2\":\"1\"},{\"1\":\"Mon Calamari\",\"2\":\"1\"},{\"1\":\"Muun\",\"2\":\"1\"},{\"1\":\"Nautolan\",\"2\":\"1\"},{\"1\":\"Neimodian\",\"2\":\"1\"},{\"1\":\"Pau'an\",\"2\":\"1\"},{\"1\":\"Quermian\",\"2\":\"1\"},{\"1\":\"Rodian\",\"2\":\"1\"},{\"1\":\"Skakoan\",\"2\":\"1\"},{\"1\":\"Sullustan\",\"2\":\"1\"},{\"1\":\"Tholothian\",\"2\":\"1\"},{\"1\":\"Togruta\",\"2\":\"1\"},{\"1\":\"Toong\",\"2\":\"1\"},{\"1\":\"Toydarian\",\"2\":\"1\"},{\"1\":\"Trandoshan\",\"2\":\"1\"},{\"1\":\"Vulptereen\",\"2\":\"1\"},{\"1\":\"Xexto\",\"2\":\"1\"},{\"1\":\"Yoda's species\",\"2\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n## # A tibble: 37 x 2\n##    species      n\n##    <chr>    <int>\n##  1 Human       35\n##  2 Droid        6\n##  3 Gungan       3\n##  4 Kaminoan     2\n##  5 Mirialan     2\n##  6 Twi'lek      2\n##  7 Wookiee      2\n##  8 Zabrak       2\n##  9 Aleena       1\n## 10 Besalisk     1\n## # … with 27 more rows\n\nstarwars %>%\n  filter(!is.na(species)) %>%\n  mutate(species = as_factor(species) %>% \n           fct_lump(n = 3)) %>%\n  count(species)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Human\",\"2\":\"35\"},{\"1\":\"Droid\",\"2\":\"6\"},{\"1\":\"Gungan\",\"2\":\"3\"},{\"1\":\"Other\",\"2\":\"39\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n## # A tibble: 4 x 2\n##   species     n\n##   <fct>   <int>\n## 1 Human      35\n## 2 Droid       6\n## 3 Gungan      3\n## 4 Other      39\n\nf <- factor(c(\"a\", \"b\", \"c\", \"d\"), levels = c(\"b\", \"c\", \"d\", \"a\"))\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: b c d a\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: b c d a\n\nfct_reorder(f, c(2,3,1,4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: c a b d\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: c a b d\n\nfct_relevel(f, \"a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: a b c d\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: a b c d\nfct_relevel(f, \"b\", \"a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: b a c d\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: b a c d\n\n# Move to the third position\nfct_relevel(f, \"a\", after = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: b c a d\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: b c a d\n\n# Relevel to the end\nfct_relevel(f, \"a\", after = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: b c d a\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: b c d a\nfct_relevel(f, \"a\", after = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] a b c d\n#> Levels: b c d a\n```\n:::\n\n```{.r .cell-code}\n## a b c d\n## Levels: b c d a\n\n# 1.0 Lollipop Chart: Top N Customers ----\nlibrary(tidyverse)\nlibrary(lubridate)\n\nbike_orderlines_tbl <- read_rds(\"../../bikes/02_wrangled_data/bike_orderlines.rds\")\n\nn <- 10\n# Data Manipulation\ntop_customers_tbl <- bike_orderlines_tbl %>%\n  \n  # Select relevant columns\n  select(bikeshop, total_price) %>%\n  \n  # Collapse the least frequent values into “other”\n  mutate(bikeshop = as_factor(bikeshop) %>% fct_lump(n = n, w = total_price)) %>%\n  \n  # Group and summarize\n  group_by(bikeshop) %>%\n  summarize(revenue = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Reorder the column customer_city by revenue\n  mutate(bikeshop = bikeshop %>% fct_reorder(revenue)) %>%\n  # Place \"Other\" at the beginning\n  mutate(bikeshop = bikeshop %>% fct_relevel(\"Other\", after = 0)) %>%\n  # Sort by this column\n  arrange(desc(bikeshop)) %>%\n  \n  # Add Revenue Text\n  mutate(revenue_text = scales::dollar(revenue, \n                                       scale  = 1e-6, \n                                       prefix = \"\", \n                                       suffix = \"M €\")) %>%\n  \n  # Add Cumulative Percent\n  mutate(cum_pct = cumsum(revenue) / sum(revenue)) %>%\n  mutate(cum_pct_text = scales::percent(cum_pct)) %>%\n  \n  # Add Rank\n  mutate(rank = row_number()) %>%\n  mutate(rank = case_when(\n    rank == max(rank) ~ NA_integer_,\n    TRUE ~ rank\n  )) %>%\n  \n  # Add Label text\n  mutate(label_text = str_glue(\"Rank: {rank}\\nRev: {revenue_text}\\nCumPct: {cum_pct_text}\"))\n\n# Data Visualization\ntop_customers_tbl %>%\n  \n  # Canvas\n  ggplot(aes(revenue, bikeshop)) +\n  \n  # Geometries\n  geom_segment(aes(xend = 0, yend = bikeshop), \n               color = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")[11],\n               size  = 1) +\n  \n  geom_point(aes(size = revenue),\n             color = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")[11]) +\n  \n  geom_label(aes(label = label_text), \n             hjust = \"inward\",\n             size  = 3,\n             color = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")[11]) +\n  \n  # Formatting\n  scale_x_continuous(labels = scales::dollar_format(scale = 1e-6, \n                                                    prefix = \"\",\n                                                    suffix = \"M €\")) +\n  labs(\n    title = str_glue(\"Top {n} Customers\"),\n    subtitle = str_glue(\n      \"Start: {year(min(bike_orderlines_tbl$order_date))}\n               End:  {year(max(bike_orderlines_tbl$order_date))}\"),\n    x = \"Revenue (M €)\",\n    y = \"Customer\",\n    caption = str_glue(\"Top 6 customers contribute\n                           52% of purchasing power.\")\n  ) +\n  \n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\"),\n    plot.caption = element_text(face = \"bold.italic\")\n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-39.png){width=672}\n:::\n\n```{.r .cell-code}\n# Select columns and filter categories\npct_sales_by_customer_tbl <- bike_orderlines_tbl %>%\n  \n  select(bikeshop, category_1, category_2, quantity) %>%\n  filter(category_1 %in% c(\"Mountain\",\"Road\")) %>% \n  \n  # Group by category and summarize\n  group_by(bikeshop, category_1, category_2) %>%\n  summarise(total_qty = sum(quantity)) %>%\n  ungroup() %>%\n  \n  # Add missing groups (not necessarily mandatory, but we'd get holes in the plot)\n  # complete() creates NAs. We need to set those to 0.\n  complete(bikeshop, nesting(category_1, category_2)) %>% \n  mutate(across(total_qty, ~replace_na(., 0))) %>%  \n  \n  # Group by bikeshop and calculate revenue ratio\n  group_by(bikeshop) %>%\n  mutate(pct = total_qty / sum(total_qty)) %>%\n  ungroup() %>%\n  \n  # Reverse order of bikeshops\n  mutate(bikeshop = as.factor(bikeshop) %>% fct_rev()) %>%\n  # Just to verify\n  mutate(bikeshop_num = as.numeric(bikeshop))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'bikeshop', 'category_1'. You can override\n#> using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# Data Visualization\npct_sales_by_customer_tbl %>%\n  \n  ggplot(aes(category_2, bikeshop)) +\n  \n  # Geometries\n  geom_tile(aes(fill = pct)) +\n  geom_text(aes(label = scales::percent(pct, accuracy = 1L)), \n            size = 3) +\n  facet_wrap(~ category_1, scales = \"free_x\") +\n  \n  # Formatting\n  scale_fill_gradient(low = \"white\", high = \"#2C3E50\") +\n  labs(\n    title = \"Heatmap of Purchasing Habits\",\n    x = \"Bike Type (Category 2)\",\n    y = \"Customer\",\n    caption = str_glue(\n      \"Customers that prefer Road: \n        To be discussed ...\n        \n        Customers that prefer Mountain: \n        To be discussed ...\")\n  ) +\n  \n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\"),\n    plot.caption = element_text(face = \"bold.italic\")\n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-40.png){width=672}\n:::\n:::\n\n# Challenge 4.1\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_3e944877f84eab88e1eeb5c5a71716bf'}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(tidyverse) # loads ggplot2\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(scales)\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'maps'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:purrr':\n#> \n#>     map\n```\n:::\n\n```{.r .cell-code}\noptions(repr.plot.width=50, repr.plot.height=3)\n\n# Challenge 1\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 306185 Columns: 67\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncovid_data_graph_tbl <- covid_data_tbl %>% # Read the covid data\n  filter(location == \"Europe\" | location == \"Germany\" | location == \"United Kingdom\" | location == \"France\" | location == \"Spain\" | location == \"United States\") %>% # Filter only the locations specified in the task\n  select(date,total_cases,location) %>% # Only date, total_cases and location are needed\n  filter(!is.na(total_cases)) %>% # Remove those dates where the total_cases number is not a number\n  filter(date < '2022-04-20') # Plot in task stops in may of 2022, so this data stops there as well\n\ncovid_data_dt <- as.data.table(covid_data_graph_tbl) # Convert tibble to data.frame\n\nlast_date_europe <- covid_data_dt[location == \"Europe\"][order(-date)][1]$date\nlast_date_USA <- covid_data_dt[location == \"United States\"][order(-date)][1]$date\n\naddMillions <- function(x, ...) #<== function will add \" %\" to any number, and allows for any additional formatting through \"format\".\n    format(paste0(x/(1e+06), \" M\"), ...)\n\ncovid_data_dt %>% ggplot(aes(x=date,y=total_cases),palette=\"Dark2\") + # plot total_cases over time\n  geom_line(aes(colour=location)) + # each location gets its own line\n  theme(legend.position = \"bottom\") + # position legend at the bottom\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B '%y\") + # Change the x axis to a date axis with montly intervals and \"month 'year\" labels\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate the x-axis labels by 45 degrees so they don't collide with each other\n  scale_y_continuous(breaks = seq(0, 200000000, by = 50000000), labels = addMillions) + \n  labs( title = \"COVID-19 confirmed cases worldwide\", # Set plot title.\n        subtitle = \"As of 19/04/2022\", # Set plot subtitle.\n        y = \"Cumulative Cases\", # Set plot y-axis label.\n        colour=\"Continent / Country\") + # Set location/country legend title.\n  theme(axis.title.x=element_blank(), # Remove x axis label \n        text = element_text(size=10)) + # Increase text size\n\n  geom_label( # Display geom_label for europe and united states last data point\n    data=covid_data_dt %>% filter((location == \"Europe\" & date == last_date_europe) | (location == \"United States\" & date == last_date_USA)),\n    aes(label=total_cases),hjust=1,vjust=0.4\n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n#Challenge 4.2\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-3_673c31c83a7af8a640d9687667de22bb'}\n\n```{.r .cell-code}\n# Challenge 2\n\n# Get Case-Fatality rate (deaths/cases)\ncovid_data_graph_tbl <- covid_data_tbl %>% # Read the covid data.\n  filter(!is.na(total_cases) & !is.na(total_deaths) & !is.na(total_deaths_per_million)) %>% # Remove those dates where the total_cases number is not a number.\n  group_by(location) %>% summarise(total_cases = sum(total_cases),total_deaths = sum(total_deaths),total_deaths_per_million = sum(total_deaths_per_million)) %>% # Group by location (country) and sum up total_cases and total_deaths over all dates.\n  mutate(fatality_rate = (total_deaths/total_cases)) %>% # Add fatality_rate column to the tibble.\n                                                         # Can be exchanged for total_deaths_per_million to visualize mortality rate.\n  select(fatality_rate,location) %>%  # Only maintain fatality_rate and location\n  mutate(location = case_when( # Replace non matching location names\n    \n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n    \n  )) %>%\n  distinct()\n\ntotal_deaths_worldwide <- covid_data_tbl %>% filter(!is.na(total_deaths)) %>% group_by(location) %>% filter(row_number()==n()) %>% summarise(total_deaths) %>%\n                                        ungroup() %>% summarise(total_deaths = sum(total_deaths))\n\nlibrary(RColorBrewer)\nlibrary(maptools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Loading required package: sp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Checking rgeos availability: FALSE\n#> Please note that 'maptools' will be retired by the end of 2023,\n#> plan transition at your earliest convenience;\n#> some functionality will be moved to 'sp'.\n#>  \tNote: when rgeos is not available, polygon geometry \tcomputations in maptools depend on gpclib,\n#>  \twhich has a restricted licence. It is disabled by default;\n#>  \tto enable gpclib, type gpclibPermit()\n```\n:::\n\n```{.r .cell-code}\ncolour_breaks <- c(10, 20, 30)\ncolours <- c(\"darkblue\", \"lightblue\", \"yellow\")\n\nworld <- map_data(\"world\")\nggplot(covid_data_graph_tbl) + \n  geom_map(dat=world, map=world, \n           aes(map_id=region), fill=\"white\", color=\"black\") + \n  geom_map(map=world, \n           aes(map_id=location, fill=fatality_rate), color=\"black\") + \n  expand_limits(x = world$long, y = world$lat) +\n  labs( title = \"Confirmed COVID-19 fatality rate.\", # Set plot title.\n        subtitle = paste0(\"Around \",round(total_deaths_worldwide / 1e6, 1),\" Million confirmed COVID-19 deaths worldwide.\"), # Set plot subtitle.\n        caption = paste0(\"Date:\",format(Sys.Date(), format=\"%d/%m/%Y\")), # Set plot caption.\n        fill = \"Fatality rate\") + # Set plot legend caption.\n  theme(axis.title.x=element_blank(), # Remove x axis label. \n        axis.title.y=element_blank(), # Remove y axis label.\n        axis.ticks = element_blank(), # Remove axis ticks.\n        axis.text.x = element_blank(), # Remove x axis texts.\n        axis.text.y = element_blank(), # Remove y axis texts.\n        )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}