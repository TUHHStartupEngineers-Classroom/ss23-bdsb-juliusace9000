{
  "hash": "65dd55310e8b905b90038b45c25d51dd",
  "result": {
    "markdown": "---\ntitle: \"Data Acquisition\"\nauthor: \"Julius von Sulecki\"\n---\n\n\n# Data Acquisition\n\nData for analysation can be imported in different ways. One way is to read data from csv or excel sheets, another is to import it directly from databases.\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-1_57f77dafecc1d58e3c2014bfd2b7a7fc'}\n\n```{.r .cell-code}\nlibrary(RSQLite)\ncon <- RSQLite::dbConnect(drv = SQLite(), dbname = \"../../00_data/02_chinook/Chinook_Sqlite.sqlite\") #connect to database\n\nlibrary(DBI) #to print the tables print(dbListTables(con))\n\nlibrary(dplyr) \nprint(tbl(con, \"Album\")) #to examine table from database\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # Source:   table<Album> [?? x 3]\n#> # Database: sqlite 3.41.2 [D:\\Git\\ss23-bdsb-juliusace9000\\00_data\\02_chinook\\Chinook_Sqlite.sqlite]\n#>    AlbumId Title                                 ArtistId\n#>      <int> <chr>                                    <int>\n#>  1       1 For Those About To Rock We Salute You        1\n#>  2       2 Balls to the Wall                            2\n#>  3       3 Restless and Wild                            2\n#>  4       4 Let There Be Rock                            1\n#>  5       5 Big Ones                                     3\n#>  6       6 Jagged Little Pill                           4\n#>  7       7 Facelift                                     5\n#>  8       8 Warner 25 Anos                               6\n#>  9       9 Plays Metallica By Four Cellos               7\n#> 10      10 Audioslave                                   8\n#> # i more rows\n```\n:::\n\n```{.r .cell-code}\nalbum_tbl <- tbl(con, \"Album\") %>% collect() #pull data in local memory\n\ndbDisconnect(con) #disconnect database\n```\n:::\n\n\n# API\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-2_7d96544a827392a071e5dfcb4c32677d'}\n\n```{.r .cell-code}\nlibrary(glue)\nname <- \"Fred\"\nglue('My name is {name}.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> My name is Fred.\n```\n:::\n\n```{.r .cell-code}\nlibrary(httr)\nresp <- GET(\"https://swapi.dev/api/people/1/\")\n\n# Wrapped into a function\nsw_api <- function(path) {\n  url <- modify_url(url = \"https://swapi.dev\", path = glue(\"/api{path}\"))\n  resp <- GET(url)\n  stop_for_status(resp) # automatically throws an error if a request did not succeed\n}\n\nresp <- sw_api(\"/people/1\")\nprint(rep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> function (x, ...)  .Primitive(\"rep\")\n```\n:::\n\n```{.r .cell-code}\nprint(rawToChar(resp$content))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"{\\\"name\\\":\\\"Luke Skywalker\\\",\\\"height\\\":\\\"172\\\",\\\"mass\\\":\\\"77\\\",\\\"hair_color\\\":\\\"blond\\\",\\\"skin_color\\\":\\\"fair\\\",\\\"eye_color\\\":\\\"blue\\\",\\\"birth_year\\\":\\\"19BBY\\\",\\\"gender\\\":\\\"male\\\",\\\"homeworld\\\":\\\"https://swapi.dev/api/planets/1/\\\",\\\"films\\\":[\\\"https://swapi.dev/api/films/1/\\\",\\\"https://swapi.dev/api/films/2/\\\",\\\"https://swapi.dev/api/films/3/\\\",\\\"https://swapi.dev/api/films/6/\\\"],\\\"species\\\":[],\\\"vehicles\\\":[\\\"https://swapi.dev/api/vehicles/14/\\\",\\\"https://swapi.dev/api/vehicles/30/\\\"],\\\"starships\\\":[\\\"https://swapi.dev/api/starships/12/\\\",\\\"https://swapi.dev/api/starships/22/\\\"],\\\"created\\\":\\\"2014-12-09T13:50:51.644000Z\\\",\\\"edited\\\":\\\"2014-12-20T21:17:56.891000Z\\\",\\\"url\\\":\\\"https://swapi.dev/api/people/1/\\\"}\"\n```\n:::\n\n```{.r .cell-code}\nlibrary(jsonlite)\nprint(fromJSON(rawToChar(resp$content)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $name\n#> [1] \"Luke Skywalker\"\n#> \n#> $height\n#> [1] \"172\"\n#> \n#> $mass\n#> [1] \"77\"\n#> \n#> $hair_color\n#> [1] \"blond\"\n#> \n#> $skin_color\n#> [1] \"fair\"\n#> \n#> $eye_color\n#> [1] \"blue\"\n#> \n#> $birth_year\n#> [1] \"19BBY\"\n#> \n#> $gender\n#> [1] \"male\"\n#> \n#> $homeworld\n#> [1] \"https://swapi.dev/api/planets/1/\"\n#> \n#> $films\n#> [1] \"https://swapi.dev/api/films/1/\" \"https://swapi.dev/api/films/2/\"\n#> [3] \"https://swapi.dev/api/films/3/\" \"https://swapi.dev/api/films/6/\"\n#> \n#> $species\n#> list()\n#> \n#> $vehicles\n#> [1] \"https://swapi.dev/api/vehicles/14/\" \"https://swapi.dev/api/vehicles/30/\"\n#> \n#> $starships\n#> [1] \"https://swapi.dev/api/starships/12/\" \"https://swapi.dev/api/starships/22/\"\n#> \n#> $created\n#> [1] \"2014-12-09T13:50:51.644000Z\"\n#> \n#> $edited\n#> [1] \"2014-12-20T21:17:56.891000Z\"\n#> \n#> $url\n#> [1] \"https://swapi.dev/api/people/1/\"\n```\n:::\n:::\n\n\nA .Renviron file was created in the home folder of the project, containing the token, password and userid. It can be accessed via `Sys.getenv('TOKEN')`\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-3_99ad6d7f5858aa28887c16b31838b851'}\n\n```{.r .cell-code}\nprint(Sys.getenv('TOKEN'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"my_individual_token\"\n```\n:::\n\n```{.r .cell-code}\nresponse <- GET(glue(\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=WDI.DE&apikey={Sys.getenv('TOKEN')}\"))\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Response [https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=WDI.DE&apikey=my_individual_token]\n#>   Date: 2023-04-29 09:25\n#>   Status: 200\n#>   Content-Type: application/json\n#>   Size: 377 B\n#> {\n#>     \"Global Quote\": {\n#>         \"01. symbol\": \"WDI.DE\",\n#>         \"02. open\": \"0.4021\",\n#>         \"03. high\": \"0.4099\",\n#>         \"04. low\": \"0.3961\",\n#>         \"05. price\": \"0.3985\",\n#>         \"06. volume\": \"210849\",\n#>         \"07. latest trading day\": \"2021-03-01\",\n#>         \"08. previous close\": \"0.4109\",\n#> ...\n```\n:::\n:::\n\n\n# Web Scraping\n\nWeb scraping is for getting data from the internet if there is no open API for usage.\n\nrvest is the library which is going to be used. ##Example:\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-4_aea5f54a768da6adf4fe595cf6f5102e'}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(stringr)\n\n# get the URL for the wikipedia page with all S&P 500 symbols\nurl <- \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n# use that URL to scrape the S&P 500 table using rvest\nlibrary(rvest)\nsp_500 <- url %>%\n  # read the HTML from the webpage\n  read_html() %>%\n  # Get the nodes with the id\n  html_nodes(css = \"#constituents\") %>%\n  # html_nodes(xpath = \"//*[@id='constituents']\"\") %>% \n  # Extract the table and turn the list into a tibble\n  html_table() %>% \n  .[[1]] %>% \n  as_tibble()\nprint(sp_500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 503 x 8\n#>    Symbol Security      `GICS Sector` `GICS Sub-Industry` Headquarters Locatio~1\n#>    <chr>  <chr>         <chr>         <chr>               <chr>                 \n#>  1 MMM    3M            Industrials   Industrial Conglom~ Saint Paul, Minnesota \n#>  2 AOS    A. O. Smith   Industrials   Building Products   Milwaukee, Wisconsin  \n#>  3 ABT    Abbott        Health Care   Health Care Equipm~ North Chicago, Illino~\n#>  4 ABBV   AbbVie        Health Care   Pharmaceuticals     North Chicago, Illino~\n#>  5 ACN    Accenture     Information ~ IT Consulting & Ot~ Dublin, Ireland       \n#>  6 ATVI   Activision B~ Communicatio~ Interactive Home E~ Santa Monica, Califor~\n#>  7 ADM    ADM           Consumer Sta~ Agricultural Produ~ Chicago, Illinois     \n#>  8 ADBE   Adobe Inc.    Information ~ Application Softwa~ San Jose, California  \n#>  9 ADP    ADP           Industrials   Human Resource & E~ Roseland, New Jersey  \n#> 10 AAP    Advance Auto~ Consumer Dis~ Automotive Retail   Raleigh, North Caroli~\n#> # i 493 more rows\n#> # i abbreviated name: 1: `Headquarters Location`\n#> # i 3 more variables: `Date added` <chr>, CIK <int>, Founded <chr>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}