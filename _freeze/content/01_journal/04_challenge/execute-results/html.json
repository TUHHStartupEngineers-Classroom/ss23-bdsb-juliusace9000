{
  "hash": "3121b623a68a8b7e73745ec7e69fa00d",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Julius von Sulecki\"\n---\n\n# Challenge 4\n\n::: {.cell hash='04_challenge_cache/html/unnamed-chunk-1_0cdb96151bd4cb26e9876b2adc2e9dd0'}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(tidyverse) # loads ggplot2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> -- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\n#> v dplyr     1.1.2     v readr     2.1.4\n#> v forcats   1.0.0     v stringr   1.5.0\n#> v ggplot2   3.4.2     v tibble    3.2.1\n#> v lubridate 1.9.2     v tidyr     1.3.0\n#> v purrr     1.0.1     \n#> -- Conflicts ------------------------------------------ tidyverse_conflicts() --\n#> x dplyr::between()     masks data.table::between()\n#> x dplyr::filter()      masks stats::filter()\n#> x dplyr::first()       masks data.table::first()\n#> x lubridate::hour()    masks data.table::hour()\n#> x lubridate::isoweek() masks data.table::isoweek()\n#> x dplyr::lag()         masks stats::lag()\n#> x dplyr::last()        masks data.table::last()\n#> x lubridate::mday()    masks data.table::mday()\n#> x lubridate::minute()  masks data.table::minute()\n#> x lubridate::month()   masks data.table::month()\n#> x lubridate::quarter() masks data.table::quarter()\n#> x lubridate::second()  masks data.table::second()\n#> x purrr::transpose()   masks data.table::transpose()\n#> x lubridate::wday()    masks data.table::wday()\n#> x lubridate::week()    masks data.table::week()\n#> x lubridate::yday()    masks data.table::yday()\n#> x lubridate::year()    masks data.table::year()\n#> i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'scales'\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     discard\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     col_factor\n```\n:::\n\n```{.r .cell-code}\noptions(repr.plot.width=50, repr.plot.height=3)\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\") %>% # Read the covid data\n  filter(location == \"Europe\" | location == \"Germany\" | location == \"United Kingdom\" | location == \"France\" | location == \"Spain\" | location == \"United States\") %>% # Filter only the locations specified in the task\n  select(date,total_cases,location) %>% # Only date, total_cases and location are needed\n  filter(!is.na(total_cases)) %>% # Remove those dates where the total_cases number is not a number\n  filter(date < '2022-04-20') # Plot in task stops in may of 2022, so this data stops there as well\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 306185 Columns: 67\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncovid_data_dt <- as.data.table(covid_data_tbl) # Convert tibble to data.frame\n\nlast_date_europe <- covid_data_dt[location == \"Europe\"][order(-date)][1]$date\nlast_date_USA <- covid_data_dt[location == \"United States\"][order(-date)][1]$date\n\naddMillions <- function(x, ...) #<== function will add \" %\" to any number, and allows for any additional formatting through \"format\".\n    format(paste0(x/(1e+06), \" M\"), ...)\n\ncovid_data_dt %>% ggplot(aes(x=date,y=total_cases),palette=\"Dark2\") + # plot total_cases over time\n  geom_line(aes(colour=location)) + # each location gets its own line\n  theme(legend.position = \"bottom\") + # position legend at the bottom\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%B '%y\") + # Change the x axis to a date axis with montly intervals and \"month 'year\" labels\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate the x-axis labels by 45 degrees so they don't collide with each other\n  scale_y_continuous(breaks = seq(0, 200000000, by = 50000000), labels = addMillions) + \n  labs( title = \"COVID-19 confirmed cases worldwide\", # Set plot title.\n        subtitle = \"As of 19/04/2022\", # Set plot subtitle.\n        y = \"Cumulative Cases\", # Set plot y-axis label.\n        colour=\"Continent / Country\") + # Set location/country legend title.\n  theme(axis.title.x=element_blank(), # remove x axis label \n        text = element_text(size=10)) + # Increase text size\n\n  geom_label( # Display geom_label for europe and united states last data point\n    data=covid_data_dt %>% filter((location == \"Europe\" & date == last_date_europe) | (location == \"United States\" & date == last_date_USA)),\n    aes(label=total_cases),hjust=1,vjust=0\n  )\n```\n\n::: {.cell-output-display}\n![](04_challenge_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}